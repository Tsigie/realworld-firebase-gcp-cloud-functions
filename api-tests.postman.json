{
  "variables": [],
  "info": {
    "name": "Realworld Firebase",
    "_postman_id": "1355338e-3b87-9513-4dca-0c9dbb7fb64a",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [{
      "name": "Manual",
      "description": "",
      "item": [{
        "name": "Register",
        "request": {
          "url": "{{apiUrl}}/users",
          "method": "POST",
          "header": [{
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          }],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"user\":{\n    \"username\": \"a_at_b\",\n    \"email\": \"a@b.com\",\n    \"password\": \"aaaaaa\"\n  }\n}"
          },
          "description": ""
        },
        "response": []
      }]
    },
    {
      "name": "Automated",
      "description": "",
      "item": [{
          "name": "Ping",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response contains \"pong\" property'] = responseJSON.hasOwnProperty('pong');",
                "",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/ping",
            "method": "GET",
            "header": [],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "var user = responseJSON.user || {};",
                "['email', 'token', 'username', 'bio', 'image'].forEach(function(f) {",
                "    tests['User has \"' + f + '\" property'] = user.hasOwnProperty(f);",
                "});",
                "",
                "if(tests['User has \"token\" property']){",
                "    postman.setEnvironmentVariable('token', user.token);",
                "}",
                "tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users/login",
            "method": "POST",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"user\":{\n\t\t\"email\": \"a@b.com\", \n\t\t\"password\": \"aaaaaa\" \n\t} \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "var user = responseJSON.user || {};",
                "['email', 'token', 'username', 'bio', 'image'].forEach(function(f) {",
                "    tests['User has \"' + f + '\" property'] = user.hasOwnProperty(f);",
                "});",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/user",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Bad Token",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 422\"] = responseCode.code === 422;",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
                "var errors = responseJSON.errors || {};",
                "tests['Errors contains \"body\" property'] = errors.hasOwnProperty('body');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/ping",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "foobar",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "404",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 404\"] = responseCode.code === 404;",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
                "var errors = responseJSON.errors || {};",
                "tests['Errors contains \"body\" property'] = errors.hasOwnProperty('body');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/nopez",
            "method": "POST",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "var responseJSON = JSON.parse(responseBody);",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "",
                "if(tests['Article has \"slug\" property']){",
                "    postman.setEnvironmentVariable('slug', article.slug);",
                "}",
                "",
                "tests['Environment variable \"slug\" has been set'] = environment.slug === article.slug;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "var responseJSON = JSON.parse(responseBody);",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "",
                "if(tests['Article has \"slug\" property']){",
                "    postman.setEnvironmentVariable('slug', article.slug);",
                "}",
                "",
                "tests['Environment variable \"slug\" has been set'] = environment.slug === article.slug;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}",
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get All Articles",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response has \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "tests['\"articles\" is an array'] = Array.isArray(responseJSON.articles);",
                "tests['Response has \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "tests['Response has \"nextEndAt\" property'] = responseJSON.hasOwnProperty('nextEndAt');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get All Articles Limit",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response has \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "tests['\"articles\" is an array'] = Array.isArray(responseJSON.articles);",
                "tests['Response has \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "tests['Response has \"nextEndAt\" property'] = responseJSON.hasOwnProperty('nextEndAt');",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?limit=5",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "limit",
                "value": "5",
                "equals": true,
                "description": ""
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get All Articles Limit endAt",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response has \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "tests['\"articles\" is an array'] = Array.isArray(responseJSON.articles);",
                "tests['Response has \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "tests['Response has \"nextEndAt\" property'] = responseJSON.hasOwnProperty('nextEndAt');",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?limit=5&endAt=10",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                  "key": "limit",
                  "value": "5",
                  "equals": true,
                  "description": ""
                },
                {
                  "key": "endAt",
                  "value": "10",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get All Articles By Tag",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response has \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "tests['\"articles\" is an array'] = Array.isArray(responseJSON.articles);",
                "tests['Response has \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "tests['Response has \"nextEndAt\" property'] = responseJSON.hasOwnProperty('nextEndAt');",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?tag=dragons",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "tag",
                "value": "dragons",
                "equals": true,
                "description": ""
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Get All Articles By Author",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                "",
                "var responseJSON = JSON.parse(responseBody);",
                "tests['Response has \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "tests['\"articles\" is an array'] = Array.isArray(responseJSON.articles);",
                "tests['Response has \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "tests['Response has \"nextEndAt\" property'] = responseJSON.hasOwnProperty('nextEndAt');",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?author=a_at_b",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "author",
                "value": "a_at_b",
                "equals": true,
                "description": ""
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"article\": {\n    \"title\": \"How to train your dragon\",\n    \"description\": \"Ever wonder how?\",\n    \"body\": \"You have to believe\",\n    \"tagList\": [\"reactjs\", \"angularjs\", \"dragons\"]\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Delete Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "tests[\"Status code is 200\"] = responseCode.code === 200;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}
